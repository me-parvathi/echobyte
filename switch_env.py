#!/usr/bin/env python3
"""
Environment Switcher for EchoByte
=================================

Simple script to switch between development, testing, and production environments.

Usage:
    python switch_env.py dev    # Switch to development
    python switch_env.py test   # Switch to testing  
    python switch_env.py prod   # Switch to production
    python switch_env.py list   # List all environments
    python switch_env.py show   # Show current environment
"""

import os
import sys
import subprocess
from pathlib import Path
from config.environments import get_environment_vars, list_environments, get_current_environment, get_environment_config

# Colors for output
class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    NC = '\033[0m'  # No Color

def print_colored(message: str, color: str) -> None:
    """Print colored message."""
    print(f"{color}{message}{Colors.NC}")

def print_info(message: str) -> None:
    print_colored(f"ℹ️  {message}", Colors.BLUE)

def print_success(message: str) -> None:
    print_colored(f"✅ {message}", Colors.GREEN)

def print_warning(message: str) -> None:
    print_colored(f"⚠️  {message}", Colors.YELLOW)

def print_error(message: str) -> None:
    print_colored(f"❌ {message}", Colors.RED)

def create_env_file(env_name: str, env_vars: dict) -> None:
    """Create .env file with environment variables."""
    env_content = []
    env_content.append(f"# EchoByte Environment: {env_name}")
    env_content.append(f"# Generated by switch_env.py")
    env_content.append("")
    
    for key, value in env_vars.items():
        env_content.append(f"{key}={value}")
    
    # Write to .env file
    env_file = Path(".env")
    env_file.write_text("\n".join(env_content))
    print_success(f"Created .env file for {env_name} environment")

def set_shell_environment(env_name: str, env_vars: dict) -> None:
    """Set environment variables for current shell session."""
    for key, value in env_vars.items():
        os.environ[key] = value
    print_success(f"Set environment variables for {env_name}")

def switch_environment(env_name: str) -> None:
    """Switch to the specified environment."""
    try:
        env_vars = get_environment_vars(env_name)
        config = get_environment_config(env_name)
        
        print_info(f"Switching to {config['name']} environment...")
        print_info(f"   Database: {config['database']['database']} on {config['database']['server']}")
        print_info(f"   API: {config['api']['host']}:{config['api']['port']}")
        
        # Safety check for production
        if env_name == "prod":
            print_warning("Switching to production environment...")
            response = input("Are you sure? (y/N): ").strip().lower()
            if response not in ['y', 'yes']:
                print_info("Operation cancelled.")
                return
        
        # Create .env file
        create_env_file(env_name, env_vars)
        
        # Set environment variables for current session
        set_shell_environment(env_name, env_vars)
        
        print_success(f"Successfully switched to {env_name} environment!")
        print_info("Environment variables are set for this session")
        print_info(".env file has been updated")
        
    except Exception as e:
        print_error(f"Error switching to {env_name}: {e}")
        sys.exit(1)

def show_current_environment() -> None:
    """Show current environment configuration."""
    current_env = get_current_environment()
    config = get_environment_config(current_env)
    
    print_info(f"Current environment: {current_env} ({config['name']})")
    print_info(f"Database: {config['database']['database']} on {config['database']['server']}")
    print_info(f"API: {config['api']['host']}:{config['api']['port']}")
    print_info(f"Debug mode: {config['api']['debug']}")

def main():
    if len(sys.argv) < 2:
        print_error("No environment specified")
        print("Usage: python switch_env.py <environment>")
        print("Environments: dev, test, prod")
        print("Commands: list, show")
        print()
        print("Examples:")
        print("  python switch_env.py dev     # Switch to development")
        print("  python switch_env.py test    # Switch to testing")
        print("  python switch_env.py prod    # Switch to production")
        print("  python switch_env.py list    # List all environments")
        print("  python switch_env.py show    # Show current environment")
        sys.exit(1)
    
    command = sys.argv[1].lower()
    
    if command == "list":
        list_environments()
    elif command == "show":
        show_current_environment()
    elif command in ["dev", "test", "prod"]:
        switch_environment(command)
    else:
        print_error(f"Unknown environment: {command}")
        print("Available environments: dev, test, prod")
        print("Available commands: list, show")
        sys.exit(1)

if __name__ == "__main__":
    main() 